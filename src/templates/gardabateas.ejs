<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Gardabateas | Página peronsal de Ricardo Sanchez Gregorio</title>
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=no">
    <% include ./components/styles %>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:regular,bold,italic,thin,light,bolditalic,black,medium&amp;lang=en">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://code.getmdl.io/1.1.1/material.teal-red.min.css">
    <link rel="stylesheet" href="/css/styles.css">
  </head>
  <body>
    <div class="demo-layout mdl-layout mdl-layout--fixed-header mdl-js-layout mdl-color--grey-100">
      <header class="demo-header mdl-layout__header mdl-layout__header--scroll mdl-color--grey-100 mdl-color-text--grey-800">
        <div class="mdl-layout__header-row" style="background-color: white;">
          <span class="mdl-layout-title">
            <a href="/">
              <img src="/img/logo.png" style="margin: 10px; height: 50px;" alt="">
            </a>
          </span>
        </div>
      </header>
      <div class="demo-ribbon"></div>
      <main class="demo-main mdl-layout__content">
        <div class="demo-container mdl-grid">
          <div class="mdl-cell mdl-cell--2-col mdl-cell--hide-tablet mdl-cell--hide-phone"></div>
          <div class="demo-content mdl-color--white mdl-shadow--4dp content mdl-color-text--grey-800 mdl-cell mdl-cell--8-col">
            <h2>Gardabateas</h2>
              <p>
                El Gardabateas es un sistema integral de seguridad para bateas. Cosnta de un poste ubicado en el centro
                de la batea sobre el que se montan un serie de detectores de movimiento y una camara IP de video de 359º.
                El sistema cuenta también con un servicio de acuda, que es prestado por una empresa colaboradora que
                cuenta con los medios tanto humanos como materiales, además de la experiencia en seguridad.
              </p>
              <p>
                Una vez instalada la alarma, para poder acceder a la batea sin provocar un alarma, esta debe ser
                desactivada. Por ello, a cada cliente se le permite acceder al registro de entradas y salidas de
                la batea de manera que es posible tener un control de accesos.
              </p>
              <p>
                La alimentación eléctrica es proporcionada mediante paneles solares, por lo que el mantenimiento de
                la instalación es mínimo. Dado que para funcionar correctamente, el sistema necesita estar conectado a
                internet, han llegado por parte de clientes potenciales aplicaciones para dicha conectividad. Actualmente
                se esta trabajando en la implementación de mediciones de tipo biologico (temperatura, oxigenación y salinidad)
              </p>
              <img src="/img/gardabateas/bateas04.jpg" alt="Detalle del sistema">
            <h3>¿Cómo funciona?</h3>
              <p>
                Los datos de los sensores instalados en la batea son recogidos por una Raspberry PI y enviados
                a un servidor remoto periodicamente. Dicho periodo puede variar en función de los valores de los sensores.
                Una vez en el servidor, dichos datos son procesados en conjunto, teniendo en cuenta valores anteriores, el
                historico de la batea, las condiciones climáticas, la hora del día, etc... El algoritmo utilizado en una
                sencilla regresión logística.
              </p>
              <p>
                A día de hoy, porque ha ido mejorando poco a poco. Las bateas están todas conectadas con el servidor a través
                de sockets que se dejan abiertos. Este socket permite la comunicación bidireccional, por lo que se puede
                enviar una orden a la batea en cualquier momento. Las ordenes que se envían permiten controlar la cámara de forma
                autonoma por parte del servidor, sin necesidad de intervención humana, en base a las medidas de los sensores.
                Además, los usuarios o vigilantes pueden conectarse a través de una aplicación web y controlar ellos la cámara.
                Evidentemente las ordenes de un usuario tiene mayor prioridad que las del servidor a la hora de manipular la cámara.
              </p>
              <p>
                Cuando se produce una alarma, se notifica. En este momento es posible hacerlo por teléfono a través de Twilio, o bien
                por email. Mediante la aplicación web, a los usuarios se les indica la batea amenazada y el grado de amenenaza en
                base a un parametro que denominamos severidad de la alarma. A través de la aplicación se pueden ver los videos
                grabados por sistema, o conectarse con la camara para manipular la camara directamente.
              </p>
            <h3>Arquitectura del servidor</h3>
              <p>
                A lo largo del desarrollo del proyecto, al arquitectura ha ido cambiando. Inicialmente los datos eran enviados por
                peticiones HTTP periodicas y el servidor estaba programado en Python. Sin embargo, pronto se decidió que era mejor
                opción el socket por su condición de bidireccional. De ese momento, teniendo en cuenta que potencialmente habría
                multitud de sockets abiertos de manera simultánea, se decidió que el servidor debía estar programado en NodeJS.
              </p>
              <p>
                La elección de Node trajo múltiples ventajas, destacando por encima de todo la sencillez y el rendimiento. Al
                principio todo el servicio era una única aplicación Node, sin embargo, una de los problemas era que cada vez que
                actualizabamos el codigo del servidor tirabamos todas conexiones de los clientes, obligandolos a reconectar. En
                ese momento ya estabamos utilizando Docker, y se decidió crear una aplicación pequeña y muy simple, cuya única función
                fuera servidor de servidor de sockets para los clientes. Recibir los mensajes y guardarlos y enviar las ordenes, nada más.
                La idea era que siendo algo tan concreto, sería mucho menos frecuente la necesidad de actualizar y por tanto
                muchas menos las ocasiones en que se desconectaría a todos los clientes.
              </p>
              <p>
                Después descubrimos que esa idea de piezas pequeñas que colaboran, es lo que ahora se llama microservicios. En ese momento
                ya teníamos un container para la aplicación y otro para la base de datos, que estaban comunicaciones a través de un link.
                Sin embargo, en el caso de este servidor de sockets, la conexion no estaba tan clara. La primera idea fue crear un socket
                interno entre ambos servicios. El problema era que en el caso de que el servicio principal no estuviera disponible temporalmente,
                por ejemplo, debido a una actualización, los mensajes procedentes de la batea no se podían perder. La solución en aquel
                momento fue crear un container de redis y la excelente librería kue, para crear dos colas, una para mensajes de las bateas
                hacia el sistema y otra para mensajes del sistema hacia las bateas. De esta forma, esas colas hacían las veces de buffer
                de comunicación entre ambos servicios, en el caso de que alguno de los dos no estuviese temporalmente disponible.
                Hoy por hoy, redis y kue han sido sustituídos por RabbitMQ, porque es más versatil, nos permite arquitecturas para esas colas mas
                variadas. También por algo que aunque parece simple, es muy importante, y es que su panel de control, que nos ofrece una información
                visual muy interesante para saber si hay algún problema con algún servicio.
              </p>
              <p>
                Así, de esa idea tan sencilla, de no tirar a los clientes cuandon actualizamos, fue para nosotros el primer paso hacía una
                arquitectura basada en microservicios y con RabbitMQ como sistema de mensajería entre ellos. A día de hoy tenemos servicios
                para gestionar el video en directo a través de ffmpeg, para convertirlo en *.webm. También tenemos un servicio de logging
                distribuido que nos permite centralizar los logs de todos los microservicios en un solo sitio.
              </p>
              <p>
                Por último, recientemente el Arduino fue sustituído por la Raspberry PI como encargado de recoger las señales de los sensores
                y enviarlas. Gracias a este cambio, ahora es posible actualizar el código de forma remota, grabar el video en la propia batea y
                sobre todo, mejorar la seguridad. Si bien con el Arduino se logro un encriptación muy básica en base al AES-128, gracias a la
                Raspberry hemos podido conectar todas las bateas a una VPN. Esto está relacionado con lo anterior puesto que en lugar de conectar
                la aplicación principal, lo que se ha metido en la VPN para pemitir la conexión es el microservicio encargado de hacer de
                servidor de sockets y el servicio de video.
              </p>
              <p>
                En general esta arquitectura nos permite ser más flexibles en todos los aspectos. La escalabilidad consiste simplemente en
                crear más containers de aquel servicio que se necesite. La coordinación se hace mediante RabbitMQ. A nivel humano, los
                microservicios hacen más sencillo para una persona nueva hacerse con el codigo, puesto que puede ir entrada microservicio a
                microservicio, sin verse en medio de gigantesco.
              </p>
              <p>
                Este es un esquema aproximado del aspecto que tiene la aplicación en este momento:
              </p>
              <img src="/img/gardabateas/esquema.png" alt="Esquema de la aplicacion">
            <h3>Flujo de trabajo</h3>
              <p>
                Si bien la arquitectura basada en microservicios tiene sus ventajas, también tiene un precio. Cada servicio tiene su propio GIT,
                sus propias dependencias en cuanto a librerías, sus características de despliegue en servidor. Además de las necesidades
                individuales, también es necesario coordinar todos esos servicios.
              </p>
              <p>
                Con el objetivo de automatizar al máximo todo lo que no sea programación, utilizamos bastantes herramientas.
                Utilizamos GIT como sistema de control de versiones. Utilizamos Gulp para automatizar ciertas tareas en desarrollo, como los
                tests y crear una version del codigo optimizada. Utilizamos Docker como crear los containers y docker-compose para
                automatizar el despligue de todos los containers que componen la aplicación y sus conexiones. Estamos en la beta del proyecto
                del Universal control plane de Docker, y realmente creemos que tiene muchas posibilidades.
              </p>
              <p>
                Por último hemos creado un servidor de integración con Jenkins. Se encarga de ejectuar los tests, crear las nuevas
                imagenes y lanzar los nuevos containers en el servidor de producción.
              </p>
          </div>
        </div>
        <% include ./components/footer %>
      </main>
    </div>
    <script src="https://code.getmdl.io/1.1.1/material.min.js"></script>
  </body>
</html>
